// https://github.com/llvm/llvm-project/blob/50337fb933e0f666d34d747a43d46840b3982bf7/clang/test/Layout/ms-x86-pack-and-align.cpp

A = { size: 8, alignment: 8 }struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
}

B = { size: 64, alignment: 32 }struct {
	{ offset: 0, size: 64 }@align(4) a { size: 64, alignment: 32 }long long,
}

X = { size: 112, alignment: 16 }@pragma_pack(2) struct {
    { offset: 0, size: 64 }a { size: 64, alignment: 32 }B,
    { offset: 64, size: 8 }b { size: 8, alignment: 8 }char,
    { offset: 80, size: 32 }c { size: 32, alignment: 32 }int,
}

YA = { size: 128, alignment: 128 }@pragma_pack(16) struct {
    @align(32) _ { size: 8, alignment: 8 }char:1,
}

YB = { size: 136, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 128 }b { size: 128, alignment: 128 }YA,
}

YC = { size: 64, alignment: 64 }@pragma_pack(8) struct {
    @align(32) _ { size: 8, alignment: 8 }char:1,
}

YD = { size: 72, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 64 }b { size: 64, alignment: 64 }YC,
}

YE = { size: 32, alignment: 32 }@pragma_pack(4) struct {
    @align(32) _ { size: 8, alignment: 8 }char:1,
}

YF = { size: 40, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 32 }b { size: 32, alignment: 32 }YE,
}

D0 = { size: 128, alignment: 128 }@pragma_pack(16) @align(16) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
}

RB0 = { size: 64, alignment: 64 }@pragma_pack(1) @align(8) struct {
    { offset: 0, size: 3 }@align(1024) b { size: 32, alignment: 32 }int:3,
}

RC = { size: 16, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 3 }@align(1024) c { size: 32, alignment: 32 }int:3,
}

RE = { size: 24, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 16 }c { size: 16, alignment: 8 }RC,
}

PA = { size: 32, alignment: 32 }@align(4) struct {
    { offset: 0, size: 32 }c { size: 32, alignment: 32 }int,
}

PB = { size: 32, alignment: 64 }@align(8) typedef { size: 32, alignment: 32 }PA

PC = { size: 40, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 32 }x { size: 32, alignment: 64 }PB,
}

PD = { size: 32, alignment: 64 }typedef { size: 32, alignment: 64 }PB

PE = { size: 40, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 32 }x { size: 32, alignment: 64 }PD,
}

QA = { size: 32, alignment: 16 }@align(2) typedef { size: 32, alignment: 32 }int

QB = { size: 40, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 32 }b { size: 32, alignment: 16 }QA,
}

QC = { size: 48, alignment: 16 }struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 16, size: 32 }b { size: 32, alignment: 16 }QA,
}

QD = { size: 16, alignment: 8 }struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 8 }char,
    { offset: 8, size: 3 }b { size: 32, alignment: 16 }QA:3,
}

EmptyAlignedLongLongMemb = { size: 0, alignment: 32 }@align(4) struct {
    { offset: 0, size: 0 }FlexArrayMemb { size: 0, alignment: 32 }[]{ size: 64, alignment: 32 }long long,
}

EmptyPackedAlignedLongLongMemb = { size: 0, alignment: 32 }@pragma_pack(1) @align(4) struct {
    { offset: 0, size: 0 }FlexArrayMemb { size: 0, alignment: 32 }[]{ size: 64, alignment: 32 }long long,
}
// hash: f3855df8be830d86
