// auto-generated: "lalrpop 0.19.4"
// sha3: 8156c72b8ae1876bebb96cc6548c9c5eb82f1d3323e7be4511215b6a6af4d483
use crate::ast::{
    Annotation, Array, BinaryExprType, BuiltinExpr, Declaration, DeclarationType, Expr, ExprType,
    Index, IndexType, OffsetofType, OpaqueTypeLayout, Record, RecordField, Span, State, Type,
    TypeExprType, TypeVariant, UnaryExprType,
};
use crate::parser_util::{
    components_to_hashmap, parse_field_layout, parse_number, parse_type_layout,
};
use crate::result::CustomError;
use repr_c::layout::{BuiltinType, FieldLayout, RecordKind, TypeLayout};
use std::collections::HashMap;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate alloc;
extern crate core;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Top {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use repr_c::layout::{BuiltinType, RecordKind, TypeLayout, FieldLayout};
    use crate::ast::{
    Type, TypeVariant, Declaration, Record, RecordField, Array, Expr,
    UnaryExprType, BinaryExprType, TypeExprType, Annotation, OpaqueTypeLayout, ExprType, BuiltinExpr,
    DeclarationType, OffsetofType, IndexType, Index, Span, State,
};
    use crate::result::{CustomError};
    use std::collections::HashMap;
    use crate::parser_util::{parse_type_layout, components_to_hashmap, parse_field_layout, parse_number};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Expr),
        Variant3(core::option::Option<Expr>),
        Variant4(Annotation),
        Variant5(alloc::vec::Vec<Annotation>),
        Variant6((String, Expr, Span)),
        Variant7(alloc::vec::Vec<(String, Expr, Span)>),
        Variant8((String, u64, Span)),
        Variant9(alloc::vec::Vec<(String, u64, Span)>),
        Variant10(Declaration),
        Variant11(alloc::vec::Vec<Declaration>),
        Variant12(RecordField),
        Variant13(alloc::vec::Vec<RecordField>),
        Variant14(alloc::vec::Vec<Expr>),
        Variant15(usize),
        Variant16(ExprType),
        Variant17(BinaryExprType),
        Variant18(IndexType),
        Variant19(BuiltinExpr),
        Variant20(BuiltinType),
        Variant21(Vec<(String, Expr, Span)>),
        Variant22(Vec<(String, u64, Span)>),
        Variant23(Vec<RecordField>),
        Variant24(Vec<Expr>),
        Variant25(core::option::Option<(String, Expr, Span)>),
        Variant26(core::option::Option<(String, u64, Span)>),
        Variant27(HashMap<String, (Expr, Span)>),
        Variant28(HashMap<String, (u64, Span)>),
        Variant29((usize, usize, String, DeclarationType)),
        Variant30(i128),
        Variant31(core::option::Option<i128>),
        Variant32(FieldLayout),
        Variant33(core::option::Option<FieldLayout>),
        Variant34(Index),
        Variant35(Vec<Index>),
        Variant36(OffsetofType),
        Variant37(OpaqueTypeLayout),
        Variant38(core::option::Option<RecordField>),
        Variant39(Option<String>),
        Variant40(RecordKind),
        Variant41(Type),
        Variant42(TypeExprType),
        Variant43(TypeLayout),
        Variant44(core::option::Option<TypeLayout>),
        Variant45(TypeVariant),
        Variant46(UnaryExprType),
        Variant47(String),
        Variant48(u64),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 3
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 4
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 0, 0, 0, 0, 62,
        // State 5
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 0, 0, 0, 0, 62,
        // State 6
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 22, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 62,
        // State 10
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, -101, 0, 62,
        // State 12
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 0, 0, 0, 0, 62,
        // State 13
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 162, 0, 163, 164, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 166, 0, 0, 0, 0, 167, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 20
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 21
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
        // State 23
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, -105, 132, 62,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 62,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 62,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, -103, 0, 62,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 29
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 62,
        // State 31
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 32
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 33
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 34
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 35
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 36
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 37
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 38
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 39
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 40
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 41
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, -107, 132, 62,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 62,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
        // State 44
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 46
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 47
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 62,
        // State 48
        0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 7, 0, 0, 0, 0, 0, 73, 74, 0, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 8, 0, 87, 88, 89, 0, 90, 9, 91, 92, 93, 94, 95, 96, 97, 10, 0, 0, 0, 62,
        // State 49
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 51
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 52
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 53
        0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 55
        125, 0, 0, 0, 21, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 132, 62,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, -211, -211, -211, 0, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, 0, -211, -211, 0, 0, 0, 0, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, 0, 0, -211, 0, -211, -211, -211, 0, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, -211, 0, -211,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, -45, 0, 0, 0, 0, 0, -45, -45, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, 0, 0, -45, 0, -45, -45, -45, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, 0, 0, 0, 0, -45,
        // State 65
        0, 0, 0, 0, 0, 0, -197, 0, 0, -197, 0, 0, 0, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, -197,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117,
        // State 68
        0, 0, 0, 0, 0, 0, -189, 0, 0, -189, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, -189,
        // State 69
        0, 0, 0, 0, 0, 0, -204, 0, 0, -204, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, -204,
        // State 70
        0, 0, 0, 0, 0, 0, -59, 0, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, -60, 0, 0, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        // State 73
        0, 0, 0, 0, 0, 0, -71, 0, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, -71,
        // State 74
        0, 0, 0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, -90,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, -87, 0, 0, -87, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, -87,
        // State 77
        0, 0, 0, 0, 0, 0, -88, 0, 0, -88, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, -88,
        // State 78
        0, 0, 0, 0, 0, 0, -89, 0, 0, -89, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        // State 79
        0, 0, 0, 0, 0, 0, -70, 0, 0, -70, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, -70,
        // State 80
        0, 0, 0, 0, 0, 0, -67, 0, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, -67,
        // State 81
        0, 0, 0, 0, 0, 0, -68, 0, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        // State 82
        0, 0, 0, 0, 0, 0, -69, 0, 0, -69, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        // State 83
        0, 0, 0, 0, 0, 0, -66, 0, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, -66,
        // State 84
        0, 0, 0, 0, 0, 0, -78, 0, 0, -78, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, -78,
        // State 85
        0, 0, 0, 0, 0, 0, -82, 0, 0, -82, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        // State 86
        0, 0, 0, 0, 0, 0, -91, 0, 0, -91, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        // State 87
        0, 0, 0, 0, 0, 0, -75, 0, 0, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, -75,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, -65, 0, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, -65,
        // State 91
        0, 0, 0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62,
        // State 92
        0, 0, 0, 0, 0, 0, -63, 0, 0, -63, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, -63,
        // State 93
        0, 0, 0, 0, 0, 0, -64, 0, 0, -64, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, -64,
        // State 94
        0, 0, 0, 0, 0, 0, -61, 0, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, -80, 0, 0, -80, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 142, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, -80,
        // State 97
        0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, -46, 0, 0, 0, 0, 0, -46, -46, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, 0, -46, 0, -46, -46, -46, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, 0, 0, 0, -46,
        // State 98
        0, 0, 0, 0, 0, 0, -191, 0, 0, -191, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, -191,
        // State 99
        0, 0, 0, 0, 0, 0, -188, 0, 0, -188, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, -188,
        // State 100
        0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, -41, 0, -41, 0, 0, 0, -41, -41, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, 0, 0, -41, 0, -41, -41, -41, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, 0, 0, 0, 0, -41,
        // State 102
        0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, -48, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, 0, -48,
        // State 104
        0, 0, 0, 0, 0, 0, -146, 0, 0, -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, -146, 0, -146,
        // State 105
        0, -180, 0, -180, 0, 0, -180, 0, -171, -180, -171, 0, 0, 0, -180, -180, 0, -180, -180, -180, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, -180, 0, -180,
        // State 106
        0, 0, 0, -172, 0, 0, -38, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, 0, -38,
        // State 107
        0, -173, 0, -162, 0, 0, -162, 0, 0, -162, 0, 0, 0, 0, -173, -173, 0, -173, -173, -173, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, -162, 0, -162,
        // State 108
        0, -135, -174, -135, 0, 0, -135, -174, -135, -135, -135, 0, -174, 0, -135, -135, 0, -135, -135, -135, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, -135, 0, -135,
        // State 109
        0, -121, -121, -121, 0, 0, -121, -121, -121, -121, -121, 0, -121, 0, -121, -121, 0, -121, -121, -121, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, 0, -121,
        // State 110
        0, 0, 0, 0, 0, 0, -185, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, -185,
        // State 111
        0, -205, -205, -205, 0, 0, -205, -205, -205, -205, -205, 0, -205, 0, -205, -205, 0, -205, -205, -205, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, -205, 0, -205,
        // State 112
        0, -50, 0, -50, 0, 0, -50, 0, -50, -50, -50, 0, 0, 0, -50, -50, 0, -50, -50, -50, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, 0, -50,
        // State 113
        0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, -176, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, -176,
        // State 115
        0, 0, 0, -52, 0, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, 0, -52,
        // State 116
        0, 0, 0, 0, 0, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, -119,
        // State 117
        0, -54, 0, -54, 0, 0, -54, 0, 0, -54, 0, 0, 0, 0, -54, -54, 0, -54, -54, -54, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, -54, 0, -54,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, -56, -56, -56, 0, 0, -56, -56, -56, -56, -56, 0, -56, 0, -56, -56, 0, -56, -56, -56, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, -56, 0, -56,
        // State 121
        0, -122, -122, -122, 0, 0, -122, -122, -122, -122, -122, 0, -122, 0, -122, -122, 0, -122, -122, -122, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, 0, -122,
        // State 122
        0, -125, -125, -125, 0, 0, -125, -125, -125, -125, -125, 0, -125, 0, -125, -125, 0, -125, -125, -125, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, 0, -125,
        // State 123
        0, -210, -210, -210, 0, 0, -210, -210, -210, -210, -210, 0, -210, 0, -210, -210, 0, -210, -210, -210, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, -210, 0, -210,
        // State 124
        -207, 0, 0, 0, -207, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, -207, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, -207,
        // State 125
        -208, 0, 0, 0, -208, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, -208, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, -208,
        // State 126
        0, -58, -58, -58, 0, 0, -58, -58, -58, -58, -58, 0, -58, 0, -58, -58, 0, -58, -58, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, 0, -58,
        // State 127
        0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, -212, -212, -212, 0, 0, -212, -212, -212, -212, -212, 0, -212, 0, -212, -212, 0, -212, -212, -212, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -212, -212, 0, -212,
        // State 132
        0, 0, 0, 0, 0, 0, -85, 0, 0, -85, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        // State 133
        0, 0, 0, 0, 0, 0, -202, 0, 0, -202, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, -202,
        // State 134
        0, 0, 0, 0, 0, 0, -72, 0, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, 0, -72,
        // State 135
        0, 0, 0, 0, 0, 0, -77, 0, 0, -77, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        // State 136
        0, 0, 0, 0, 0, 0, -81, 0, 0, -81, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, -81,
        // State 137
        0, 0, 0, 0, 0, 0, -74, 0, 0, -74, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, -74,
        // State 138
        0, 0, 0, 0, 0, 0, -201, 0, 0, -201, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, -201,
        // State 139
        0, 0, 0, 0, 0, 0, -73, 0, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, -73,
        // State 140
        0, 0, 0, 0, 0, 0, -79, 0, 0, -79, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, -79,
        // State 141
        0, 0, 0, 0, 0, 0, -83, 0, 0, -83, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        // State 142
        0, 0, 0, 0, 0, 0, -76, 0, 0, -76, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0,
        // State 151
        0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, -159, 0, 0, 0, 0, 0, -159, -159, 0, -159, -159, -159, -159, -159, -159, -159, -159, -159, -159, -159, -159, 0, 0, -159, 0, -159, -159, -159, 0, -159, -159, -159, -159, -159, -159, -159, -159, -159, -159, 0, 0, 0, -159,
        // State 152
        0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, -158, 0, 0, 0, 0, 0, -158, -158, 0, -158, -158, -158, -158, -158, -158, -158, -158, -158, -158, -158, -158, 0, 0, -158, 0, -158, -158, -158, 0, -158, -158, -158, -158, -158, -158, -158, -158, -158, -158, 0, 0, 0, -158,
        // State 153
        0, 0, 0, 0, 0, 0, -190, 0, 0, -190, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, -190,
        // State 154
        0, 0, 0, 0, 0, 0, -184, 0, 0, -184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, -184,
        // State 155
        -147, 0, 0, 0, -147, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, -147, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, -147,
        // State 156
        -181, 0, 0, 0, -181, 0, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, -181, 0, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, -181,
        // State 157
        -182, 0, 0, 0, -182, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182,
        // State 158
        -39, 0, 0, 0, -39, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39,
        // State 159
        -164, 0, 0, 0, -164, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, -164, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, -164,
        // State 160
        -167, 0, 0, 0, -167, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, -167, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, -167,
        // State 161
        -165, 0, 0, 0, -165, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, -165, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, -165,
        // State 162
        -163, 0, 0, 0, -163, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, -163, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, -163,
        // State 163
        -168, 0, 0, 0, -168, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, -168, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, -168,
        // State 164
        -166, 0, 0, 0, -166, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, -166, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, -166,
        // State 165
        -138, 0, 0, 0, -138, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, -138, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, -138,
        // State 166
        -136, 0, 0, 0, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, -136,
        // State 167
        -137, 0, 0, 0, -137, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, -137,
        // State 168
        0, -206, -206, -206, 0, 0, -206, -206, -206, -206, -206, 0, -206, 0, -206, -206, 0, -206, -206, -206, 0, 0, 0, -206, 0, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206, -206, 0, -206,
        // State 169
        0, -179, -179, -179, 0, 0, -179, -179, -179, -179, -179, 0, -179, 0, -179, -179, 0, -179, -179, -179, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, -179, 0, -179,
        // State 170
        0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, -200, 0, 0, -200, 0, 0, 0, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, -200,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, -84, 0, 0, -84, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        // State 180
        0, 0, 0, 0, 0, 0, -86, 0, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        // State 183
        0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, -194, 0, 0, 0, 0, 0, -194, -194, 0, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, 0, 0, -194, 0, -194, -194, -194, 0, -194, -194, -194, -194, -194, -194, -194, -194, -194, 0, 0, 0, 0, -194,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, -198, 0, 0, -198, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, -198,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, -29, 0, -29,
        // State 188
        0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0,
        // State 189
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 0, -169, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, -169, 0, -169,
        // State 194
        0, 0, 0, 0, 0, 0, -49, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, -49, 0, -49,
        // State 195
        0, -175, 0, -175, 0, 0, -175, 0, -175, -175, -175, 0, 0, 0, -175, -175, 0, -175, -175, -175, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, -175, 0, -175,
        // State 196
        0, -51, 0, -51, 0, 0, -51, 0, -51, -51, -51, 0, 0, 0, -51, -51, 0, -51, -51, -51, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, -51, 0, -51,
        // State 197
        0, 0, 0, -177, 0, 0, -177, 0, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, -177, 0, -177,
        // State 198
        0, 0, 0, -53, 0, 0, -53, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, -53, 0, -53,
        // State 199
        0, -55, 0, -55, 0, 0, -55, 0, 0, -55, 0, 0, 0, 0, -55, -55, 0, -55, -55, -55, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, -55, 0, -55,
        // State 200
        0, -178, 0, -178, 0, 0, -178, 0, 0, -178, 0, 0, 0, 0, -178, -178, 0, -178, -178, -178, 0, 0, 0, -178, 0, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -178, -178, 0, -178,
        // State 201
        0, -57, -57, -57, 0, 0, -57, -57, -57, -57, -57, 0, -57, 0, -57, -57, 0, -57, -57, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, -57, 0, -57,
        // State 202
        0, 0, 0, 0, 0, 0, -199, 0, 0, -199, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, -199,
        // State 203
        0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        0, -120, -120, -120, 0, 0, -120, -120, -120, -120, -120, 0, -120, 0, -120, -120, 0, -120, -120, -120, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, 0, -120,
        // State 205
        -126, 0, 0, 0, -126, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126,
        // State 206
        0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0, 0,
        // State 207
        0, 0, 0, 0, 0, 0, -203, 0, 0, -203, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, -203,
        // State 208
        -34, 0, 0, 0, -34, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, -34, -34, -34,
        // State 209
        0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0,
        // State 210
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16,
        // State 211
        0, 0, 0, 0, 0, 0, -145, 0, 0, -145, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, -145,
        // State 212
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, -22,
        // State 213
        0, 0, 0, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -213, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0,
        // State 215
        0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0,
        // State 216
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, -30, 0, -30,
        // State 217
        0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, 0,
        // State 218
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130,
        // State 219
        0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, -42, 0, -42, 0, 0, 0, -42, -42, 0, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, 0, 0, -42, 0, -42, -42, -42, 0, -42, -42, -42, -42, -42, -42, -42, -42, -42, 0, 0, 0, 0, -42,
        // State 220
        0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, -40, 0, -40, 0, 0, 0, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, 0, 0, -40, 0, -40, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, 0, 0, 0, 0, -40,
        // State 221
        0, -123, -123, -123, 0, 0, -123, -123, -123, -123, -123, 0, -123, 0, -123, -123, 0, -123, -123, -123, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, 0, -123,
        // State 222
        -35, 0, 0, 0, -35, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, -35, -35, -35,
        // State 223
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, -17,
        // State 224
        0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0,
        // State 225
        0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0,
        // State 226
        0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0,
        // State 227
        0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 228
        0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 229
        0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 230
        0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 231
        0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 232
        0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0,
        // State 233
        0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0,
        // State 234
        0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 235
        0, -124, -124, -124, 0, 0, -124, -124, -124, -124, -124, 0, -124, 0, -124, -124, 0, -124, -124, -124, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, 0, -124,
        // State 236
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 237
        0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0,
        // State 238
        0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 239
        0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 65 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -183,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        -24,
        // State 58
        -116,
        // State 59
        -209,
        // State 60
        0,
        // State 61
        -211,
        // State 62
        -25,
        // State 63
        0,
        // State 64
        0,
        // State 65
        -197,
        // State 66
        0,
        // State 67
        -117,
        // State 68
        -189,
        // State 69
        -204,
        // State 70
        -59,
        // State 71
        0,
        // State 72
        -60,
        // State 73
        -71,
        // State 74
        -90,
        // State 75
        0,
        // State 76
        -87,
        // State 77
        -88,
        // State 78
        -89,
        // State 79
        -70,
        // State 80
        -67,
        // State 81
        -68,
        // State 82
        -69,
        // State 83
        -66,
        // State 84
        -78,
        // State 85
        -82,
        // State 86
        -91,
        // State 87
        -75,
        // State 88
        0,
        // State 89
        0,
        // State 90
        -65,
        // State 91
        -62,
        // State 92
        -63,
        // State 93
        -64,
        // State 94
        -61,
        // State 95
        0,
        // State 96
        -80,
        // State 97
        0,
        // State 98
        -191,
        // State 99
        -188,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        -48,
        // State 104
        -146,
        // State 105
        -180,
        // State 106
        -38,
        // State 107
        -162,
        // State 108
        -135,
        // State 109
        -121,
        // State 110
        -185,
        // State 111
        -205,
        // State 112
        -50,
        // State 113
        0,
        // State 114
        -176,
        // State 115
        -52,
        // State 116
        -119,
        // State 117
        -54,
        // State 118
        0,
        // State 119
        0,
        // State 120
        -56,
        // State 121
        -122,
        // State 122
        -125,
        // State 123
        -210,
        // State 124
        0,
        // State 125
        0,
        // State 126
        -58,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        -212,
        // State 132
        -85,
        // State 133
        -202,
        // State 134
        -72,
        // State 135
        -77,
        // State 136
        -81,
        // State 137
        -74,
        // State 138
        -201,
        // State 139
        -73,
        // State 140
        -79,
        // State 141
        -83,
        // State 142
        -76,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        -118,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        -190,
        // State 154
        -184,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        -206,
        // State 169
        -179,
        // State 170
        0,
        // State 171
        -200,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        -84,
        // State 180
        -86,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        -198,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        -169,
        // State 194
        -49,
        // State 195
        -175,
        // State 196
        -51,
        // State 197
        -177,
        // State 198
        -53,
        // State 199
        -55,
        // State 200
        -178,
        // State 201
        -57,
        // State 202
        -199,
        // State 203
        0,
        // State 204
        -120,
        // State 205
        0,
        // State 206
        0,
        // State 207
        -203,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        -145,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        -123,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        0,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        0,
        // State 231
        0,
        // State 232
        0,
        // State 233
        0,
        // State 234
        0,
        // State 235
        -124,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            6 => match state {
                28 => 45,
                _ => 26,
            },
            9 => 42,
            12 => 25,
            14 => 1,
            17 => 27,
            20 => 41,
            23 => match state {
                34 => 193,
                _ => 103,
            },
            24 => 36,
            25 => match state {
                4 | 12 => 97,
                11 | 27..=28 => 148,
                26 | 45 => 184,
                _ => 64,
            },
            27 => match state {
                5 => 12,
                _ => 4,
            },
            28 => 227,
            29 => 104,
            30 => 105,
            31 => 106,
            32 => 107,
            33 => 108,
            34 => 109,
            35 => 65,
            36 => 175,
            37 => 143,
            38 => 149,
            39 => 173,
            40 => match state {
                42 => 209,
                _ => 176,
            },
            42 => match state {
                25 => 181,
                _ => 144,
            },
            44 => 177,
            45 => match state {
                30 => 189,
                _ => 145,
            },
            46 => match state {
                1 => 62,
                _ => 57,
            },
            47 => 58,
            48 => match state {
                13 => 154,
                20 => 170,
                47 => 224,
                _ => 110,
            },
            49 => 111,
            50 => 13,
            52 => 228,
            53 => 28,
            55 => match state {
                53 => 234,
                _ => 229,
            },
            56 => match state {
                56 => 238,
                _ => 230,
            },
            57 => match state {
                35 => 195,
                _ => 112,
            },
            58 => 38,
            59 => 53,
            60 => 113,
            61 => 133,
            62 => 114,
            63 => 34,
            64 => match state {
                27 => 185,
                _ => 150,
            },
            66 => match state {
                26 => 44,
                28 => 46,
                45 => 48,
                _ => 29,
            },
            67 => 66,
            68 => match state {
                36 => 197,
                _ => 115,
            },
            69 => 37,
            70 => 194,
            71 => 14,
            72 => 15,
            73 => 16,
            74 => 17,
            75 => 18,
            76 => 196,
            77 => 116,
            78 => 198,
            79 => 199,
            80 => match state {
                38 => 201,
                _ => 168,
            },
            81 => match state {
                37 => 200,
                _ => 117,
            },
            82 => 35,
            83 => 59,
            84 => match state {
                10 => 147,
                23 => 174,
                31 => 190,
                32 => 191,
                41 => 206,
                49 => 226,
                51 => 232,
                52 => 233,
                54 => 236,
                55 => 237,
                _ => 118,
            },
            86 => match state {
                8 => 138,
                21 => 171,
                29 => 188,
                33 => 192,
                39 => 202,
                40 => 203,
                44 => 215,
                46 => 217,
                48 => 225,
                _ => 67,
            },
            87 => 119,
            88 => 5,
            90 => match state {
                4 => 98,
                5 => 99,
                12 => 153,
                _ => 68,
            },
            91 => match state {
                19 | 38 => 169,
                _ => 120,
            },
            92 => 19,
            94 => match state {
                22 => 172,
                _ => 121,
            },
            95 => match state {
                0..=1 => 60,
                2 => 63,
                3..=5 | 8 | 12 | 21 | 29 | 33 | 39..=40 | 44 | 46 | 48 => 69,
                9 | 25 | 30 => 146,
                11 | 26..=28 | 45 => 151,
                24 | 42 => 178,
                50 | 56 => 231,
                _ => 122,
            },
            96 => match state {
                43 => 213,
                _ => 123,
            },
            97 => 214,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""%""###,
            r###""&&""###,
            r###""(""###,
            r###""()""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""@""###,
            r###""BITS_PER_BYTE""###,
            r###""[""###,
            r###""]""###,
            r###""_""###,
            r###""align""###,
            r###""alignof""###,
            r###""attr_packed""###,
            r###""bool""###,
            r###""char""###,
            r###""const""###,
            r###""double""###,
            r###""enum""###,
            r###""f32""###,
            r###""f64""###,
            r###""float""###,
            r###""i128""###,
            r###""i16""###,
            r###""i32""###,
            r###""i64""###,
            r###""i8""###,
            r###""int""###,
            r###""long""###,
            r###""offsetof""###,
            r###""offsetof_bits""###,
            r###""opaque""###,
            r###""pragma_pack""###,
            r###""ptr""###,
            r###""short""###,
            r###""signed""###,
            r###""sizeof""###,
            r###""struct""###,
            r###""typedef""###,
            r###""u128""###,
            r###""u16""###,
            r###""u32""###,
            r###""u64""###,
            r###""u8""###,
            r###""union""###,
            r###""unsigned""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"(0x[0-9a-fA-F_]+|[0-9]+|0o[0-7]+|0b[01]+)"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input, 'a>
    where 
    {
        state: &'a mut State,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input (), &'a ())>,
    }
    impl<'input, 'a> __state_machine::ParserDefinition for __StateMachine<'input, 'a>
    where 
    {
        type Location = usize;
        type Error = CustomError;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = alloc::vec::Vec<Declaration>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 65 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.state,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
        'a,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(2, _) if true => Some(0),
            Token(3, _) if true => Some(1),
            Token(4, _) if true => Some(2),
            Token(5, _) if true => Some(3),
            Token(6, _) if true => Some(4),
            Token(7, _) if true => Some(5),
            Token(8, _) if true => Some(6),
            Token(9, _) if true => Some(7),
            Token(10, _) if true => Some(8),
            Token(11, _) if true => Some(9),
            Token(12, _) if true => Some(10),
            Token(13, _) if true => Some(11),
            Token(14, _) if true => Some(12),
            Token(15, _) if true => Some(13),
            Token(16, _) if true => Some(14),
            Token(17, _) if true => Some(15),
            Token(18, _) if true => Some(16),
            Token(19, _) if true => Some(17),
            Token(20, _) if true => Some(18),
            Token(21, _) if true => Some(19),
            Token(22, _) if true => Some(20),
            Token(23, _) if true => Some(21),
            Token(24, _) if true => Some(22),
            Token(25, _) if true => Some(23),
            Token(26, _) if true => Some(24),
            Token(27, _) if true => Some(25),
            Token(28, _) if true => Some(26),
            Token(29, _) if true => Some(27),
            Token(30, _) if true => Some(28),
            Token(31, _) if true => Some(29),
            Token(32, _) if true => Some(30),
            Token(33, _) if true => Some(31),
            Token(34, _) if true => Some(32),
            Token(35, _) if true => Some(33),
            Token(36, _) if true => Some(34),
            Token(37, _) if true => Some(35),
            Token(38, _) if true => Some(36),
            Token(39, _) if true => Some(37),
            Token(40, _) if true => Some(38),
            Token(41, _) if true => Some(39),
            Token(42, _) if true => Some(40),
            Token(43, _) if true => Some(41),
            Token(44, _) if true => Some(42),
            Token(45, _) if true => Some(43),
            Token(46, _) if true => Some(44),
            Token(47, _) if true => Some(45),
            Token(48, _) if true => Some(46),
            Token(49, _) if true => Some(47),
            Token(50, _) if true => Some(48),
            Token(51, _) if true => Some(49),
            Token(52, _) if true => Some(50),
            Token(53, _) if true => Some(51),
            Token(54, _) if true => Some(52),
            Token(55, _) if true => Some(53),
            Token(56, _) if true => Some(54),
            Token(57, _) if true => Some(55),
            Token(58, _) if true => Some(56),
            Token(59, _) if true => Some(57),
            Token(60, _) if true => Some(58),
            Token(61, _) if true => Some(59),
            Token(62, _) if true => Some(60),
            Token(63, _) if true => Some(61),
            Token(64, _) if true => Some(62),
            Token(0, _) if true => Some(63),
            Token(1, _) if true => Some(64),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'a,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 => match __token {
                Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(0, __tok0) | Token(1, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub(crate) struct TopParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl TopParser {
        pub(crate) fn new() -> TopParser {
            let __builder = super::__intern_token::new_builder();
            TopParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub(crate) fn parse<
            'input,
            'a,
        >(
            &self,
            state: &'a mut State,
            input: &'input str,
        ) -> Result<alloc::vec::Vec<Declaration>, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    state,
                    input,
                    __phantom: core::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> Option<Result<alloc::vec::Vec<Declaration>,__lalrpop_util::ParseError<usize, Token<'input>, CustomError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                __reduce5(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            6 => {
                __reduce6(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                __reduce33(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            34 => {
                __reduce34(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                __reduce49(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            50 => {
                __reduce50(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                __reduce60(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            61 => {
                __reduce61(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                __reduce84(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            85 => {
                __reduce85(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                __reduce98(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            99 => {
                __reduce99(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            100 => {
                __reduce100(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                // Components<Expr> = Comma<Component<Expr>> => ActionFn(130);
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action130::<>(state, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 44)
            }
            114 => {
                // Components<u64> = Comma<Component<u64>> => ActionFn(131);
                let __sym0 = __pop_Variant22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action131::<>(state, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant28(__nt), __end));
                (1, 45)
            }
            115 => {
                __reduce115(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                __reduce117(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            118 => {
                __reduce118(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            119 => {
                __reduce119(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                __reduce123(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            124 => {
                __reduce124(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                // FieldLayout = "{", Components<u64>, "}" => ActionFn(252);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant28(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = match super::__action252::<>(state, input, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant32(__nt), __end));
                (3, 53)
            }
            130 => {
                __reduce130(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            135 => {
                __reduce135(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            136 => {
                __reduce136(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            137 => {
                __reduce137(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            138 => {
                __reduce138(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            139 => {
                __reduce139(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            140 => {
                __reduce140(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            141 => {
                __reduce141(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            142 => {
                __reduce142(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            143 => {
                __reduce143(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            144 => {
                // OpaqueTypeLayout = "{", Components<Expr>, "}" => ActionFn(255);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant27(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = match super::__action255::<>(state, input, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant37(__nt), __end));
                (3, 61)
            }
            145 => {
                __reduce145(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            146 => {
                __reduce146(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            147 => {
                __reduce147(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            148 => {
                __reduce148(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            149 => {
                __reduce149(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            150 => {
                __reduce150(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            151 => {
                __reduce151(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            152 => {
                __reduce152(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            153 => {
                __reduce153(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            154 => {
                __reduce154(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            155 => {
                __reduce155(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            156 => {
                __reduce156(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            157 => {
                __reduce157(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            158 => {
                __reduce158(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            159 => {
                __reduce159(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            160 => {
                __reduce160(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            161 => {
                __reduce161(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            162 => {
                __reduce162(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            163 => {
                __reduce163(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            164 => {
                __reduce164(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            165 => {
                __reduce165(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            166 => {
                __reduce166(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            167 => {
                __reduce167(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            168 => {
                __reduce168(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            169 => {
                __reduce169(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            170 => {
                __reduce170(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            171 => {
                __reduce171(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            172 => {
                __reduce172(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            173 => {
                __reduce173(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            174 => {
                __reduce174(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            175 => {
                __reduce175(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            176 => {
                __reduce176(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            177 => {
                __reduce177(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            178 => {
                __reduce178(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            179 => {
                __reduce179(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            180 => {
                __reduce180(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            181 => {
                __reduce181(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            182 => {
                __reduce182(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            183 => {
                __reduce183(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            184 => {
                __reduce184(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            185 => {
                __reduce185(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            186 => {
                __reduce186(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            187 => {
                __reduce187(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            188 => {
                __reduce188(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            189 => {
                __reduce189(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            190 => {
                __reduce190(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            191 => {
                __reduce191(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            192 => {
                __reduce192(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            193 => {
                // TypeLayout = "{", Components<u64>, "}" => ActionFn(273);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant28(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = match super::__action273::<>(state, input, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant43(__nt), __end));
                (3, 88)
            }
            194 => {
                __reduce194(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            195 => {
                __reduce195(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            196 => {
                __reduce196(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            197 => {
                __reduce197(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            198 => {
                __reduce198(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            199 => {
                __reduce199(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            200 => {
                __reduce200(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            201 => {
                __reduce201(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            202 => {
                __reduce202(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            203 => {
                __reduce203(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            204 => {
                __reduce204(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            205 => {
                __reduce205(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            206 => {
                __reduce206(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            207 => {
                __reduce207(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            208 => {
                // __Top = Top => ActionFn(0);
                let __sym0 = __pop_Variant11(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(state, input, __sym0);
                return Some(Ok(__nt));
            }
            209 => {
                // i128 = number => ActionFn(275);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action275::<>(state, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 94)
            }
            210 => {
                __reduce210(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            211 => {
                __reduce211(state, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            212 => {
                // u64 = number => ActionFn(276);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action276::<>(state, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant48(__nt), __end));
                (1, 97)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (String, Expr, Span), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (String, u64, Span), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (usize, usize, String, DeclarationType), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Annotation, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinaryExprType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BuiltinExpr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BuiltinType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Declaration, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExprType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, FieldLayout, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, HashMap<String, (Expr, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, HashMap<String, (u64, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Index, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IndexType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, OffsetofType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, OpaqueTypeLayout, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, RecordField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, RecordKind, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, TypeExprType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, TypeLayout, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, TypeVariant, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnaryExprType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<(String, Expr, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<(String, u64, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Index>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<RecordField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(String, Expr, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(String, u64, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Annotation>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Declaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<RecordField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(String, Expr, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(String, u64, Span)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<FieldLayout>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<RecordField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<TypeLayout>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<i128>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, i128, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u64, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // "int"? = "int" => ActionFn(114);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action114::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // "int"? =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action115::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // "signed"? = "signed" => ActionFn(116);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // "signed"? =  => ActionFn(117);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce4<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (":" <TopLevelExpr>) = ":", TopLevelExpr => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (":" <TopLevelExpr>)? = ":", TopLevelExpr => ActionFn(194);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action194::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (":" <TopLevelExpr>)? =  => ActionFn(119);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action119::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce7<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Annotation>) = Annotation => ActionFn(123);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action123::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Annotation>)* =  => ActionFn(121);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action121::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce9<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Annotation>)* = (<Annotation>)+ => ActionFn(122);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce10<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Annotation>)+ = Annotation => ActionFn(197);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action197::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Annotation>)+ = (<Annotation>)+, Annotation => ActionFn(198);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action198::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce12<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<Expr>> ",") = Component<Expr>, "," => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action174::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<Expr>> ",")* =  => ActionFn(172);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action172::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce14<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<Expr>> ",")* = (<Component<Expr>> ",")+ => ActionFn(173);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action173::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<Expr>> ",")+ = Component<Expr>, "," => ActionFn(203);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action203::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce16<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<Expr>> ",")+ = (<Component<Expr>> ",")+, Component<Expr>, "," => ActionFn(204);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action204::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce17<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<u64>> ",") = Component<u64>, "," => ActionFn(179);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action179::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce18<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<u64>> ",")* =  => ActionFn(177);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action177::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce19<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<u64>> ",")* = (<Component<u64>> ",")+ => ActionFn(178);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action178::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce20<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<u64>> ",")+ = Component<u64>, "," => ActionFn(207);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action207::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce21<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Component<u64>> ",")+ = (<Component<u64>> ",")+, Component<u64>, "," => ActionFn(208);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action208::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce22<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Declaration>) = Declaration => ActionFn(140);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action140::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce23<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Declaration>)+ = Declaration => ActionFn(211);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action211::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce24<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<Declaration>)+ = (<Declaration>)+, Declaration => ActionFn(212);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action212::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce25<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<RecordField> ",") = RecordField, "," => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce26<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<RecordField> ",")* =  => ActionFn(149);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action149::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce27<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<RecordField> ",")* = (<RecordField> ",")+ => ActionFn(150);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<RecordField> ",")+ = RecordField, "," => ActionFn(213);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action213::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<RecordField> ",")+ = (<RecordField> ",")+, RecordField, "," => ActionFn(214);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action214::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce30<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<TopLevelExpr> ",") = TopLevelExpr, "," => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action154::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<TopLevelExpr> ",")* =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce32<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<TopLevelExpr> ",")* = (<TopLevelExpr> ",")+ => ActionFn(153);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce33<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<TopLevelExpr> ",")+ = TopLevelExpr, "," => ActionFn(217);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action217::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce34<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // (<TopLevelExpr> ",")+ = (<TopLevelExpr> ",")+, TopLevelExpr, "," => ActionFn(218);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action218::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce35<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(137);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action137::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce36<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(136);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action136::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 22)
    }
    pub(crate) fn __reduce37<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // AndExpr = BinaryExpr<RelExpr, AndExprType> => ActionFn(61);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce38<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // AndExprType = "&&" => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce39<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", "pragma_pack", "(", TopLevelExpr, ")" => ActionFn(9);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action9::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (5, 25)
    }
    pub(crate) fn __reduce40<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", "attr_packed" => ActionFn(10);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action10::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce41<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", "align", "(", TopLevelExpr, ")" => ActionFn(11);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action11::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (5, 25)
    }
    pub(crate) fn __reduce42<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation* =  => ActionFn(132);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action132::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce43<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation* = Annotation+ => ActionFn(133);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action133::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation => ActionFn(141);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action141::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation+, Annotation => ActionFn(142);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action142::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce46<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ArrayIndex = "[", TopLevelExpr, "]" => ActionFn(96);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action96::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce47<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<AndExpr, OrExprType> = AndExpr => ActionFn(109);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce48<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<AndExpr, OrExprType> = SpannedExpr<BinaryExpr<AndExpr, OrExprType>>, OrExprType, SpannedExpr<AndExpr> => ActionFn(110);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action110::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce49<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<MulExpr, SumExprType> = MulExpr => ActionFn(103);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action103::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce50<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<MulExpr, SumExprType> = SpannedExpr<BinaryExpr<MulExpr, SumExprType>>, SumExprType, SpannedExpr<MulExpr> => ActionFn(104);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action104::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 30)
    }
    pub(crate) fn __reduce51<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<RelExpr, AndExprType> = RelExpr => ActionFn(107);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce52<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<RelExpr, AndExprType> = SpannedExpr<BinaryExpr<RelExpr, AndExprType>>, AndExprType, SpannedExpr<RelExpr> => ActionFn(108);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action108::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 31)
    }
    pub(crate) fn __reduce53<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<SumExpr, RelExprType> = SumExpr => ActionFn(105);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce54<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<SumExpr, RelExprType> = SpannedExpr<BinaryExpr<SumExpr, RelExprType>>, RelExprType, SpannedExpr<SumExpr> => ActionFn(106);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action106::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce55<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<UnaryExpr, MulExprType> = UnaryExpr => ActionFn(101);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce56<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BinaryExpr<UnaryExpr, MulExprType> = SpannedExpr<BinaryExpr<UnaryExpr, MulExprType>>, MulExprType, SpannedExpr<UnaryExpr> => ActionFn(102);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action102::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce57<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinExpr = "BITS_PER_BYTE" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce58<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "()" => ActionFn(24);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce59<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "bool" => ActionFn(25);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce60<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "u8" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce61<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "u16" => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce62<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "u32" => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce63<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "u64" => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce64<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "u128" => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "i8" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce66<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "i16" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce67<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "i32" => ActionFn(33);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce68<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "i64" => ActionFn(34);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce69<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "i128" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce70<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "char" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce71<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "signed", "char" => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce72<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned", "char" => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce73<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "signed", "short" => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action186::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce74<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "short" => ActionFn(187);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action187::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce75<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned", "short" => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce76<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "signed", "int" => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action188::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce77<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "int" => ActionFn(189);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action189::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce78<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned", "int" => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action184::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce79<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned" => ActionFn(185);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce80<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "signed", "long" => ActionFn(190);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action190::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce81<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "long" => ActionFn(191);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action191::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce82<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned", "long" => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action44::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce83<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "signed", "long", "long" => ActionFn(192);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action192::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 35)
    }
    pub(crate) fn __reduce84<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "long", "long" => ActionFn(193);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action193::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce85<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "unsigned", "long", "long" => ActionFn(46);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action46::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 35)
    }
    pub(crate) fn __reduce86<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "f32" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce87<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "f64" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce88<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "float" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce89<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "double" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce90<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // BuiltinType = "ptr" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce91<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<Expr>> = Component<Expr> => ActionFn(279);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action279::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce92<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<Expr>> =  => ActionFn(280);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action280::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce93<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<Expr>> = (<Component<Expr>> ",")+, Component<Expr> => ActionFn(281);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action281::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce94<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<Expr>> = (<Component<Expr>> ",")+ => ActionFn(282);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action282::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce95<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<u64>> = Component<u64> => ActionFn(283);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce96<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<u64>> =  => ActionFn(284);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action284::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 37)
    }
    pub(crate) fn __reduce97<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<u64>> = (<Component<u64>> ",")+, Component<u64> => ActionFn(285);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action285::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce98<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<Component<u64>> = (<Component<u64>> ",")+ => ActionFn(286);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action286::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce99<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<RecordField> = RecordField => ActionFn(297);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action297::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce100<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<RecordField> =  => ActionFn(298);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action298::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce101<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<RecordField> = (<RecordField> ",")+, RecordField => ActionFn(299);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action299::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 38)
    }
    pub(crate) fn __reduce102<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<RecordField> = (<RecordField> ",")+ => ActionFn(300);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action300::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce103<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<TopLevelExpr> = TopLevelExpr => ActionFn(301);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action301::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce104<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<TopLevelExpr> =  => ActionFn(302);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action302::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 39)
    }
    pub(crate) fn __reduce105<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<TopLevelExpr> = (<TopLevelExpr> ",")+, TopLevelExpr => ActionFn(303);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action303::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce106<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Comma<TopLevelExpr> = (<TopLevelExpr> ",")+ => ActionFn(304);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action304::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce107<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<Expr> = id, ":", Expr => ActionFn(221);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action221::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 40)
    }
    pub(crate) fn __reduce108<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<Expr>? = Component<Expr> => ActionFn(170);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action170::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce109<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<Expr>? =  => ActionFn(171);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action171::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce110<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<u64> = id, ":", u64 => ActionFn(222);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant48(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action222::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce111<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<u64>? = Component<u64> => ActionFn(175);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action175::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce112<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Component<u64>? =  => ActionFn(176);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action176::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 43)
    }
    pub(crate) fn __reduce115<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Declaration = DeclarationType => ActionFn(2);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce116<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // DeclarationType = id, "=", Type => ActionFn(250);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action250::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce117<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // DeclarationType = "const", id, "=", TopLevelExpr => ActionFn(251);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action251::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce118<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Expr = SpannedExpr<OrExpr> => ActionFn(58);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce119<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = "(", Expr, ")" => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 49)
    }
    pub(crate) fn __reduce120<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = BuiltinExpr => ActionFn(82);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce121<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = i128 => ActionFn(83);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce122<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = TypeExprType, "(", Type, ")" => ActionFn(84);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action84::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce123<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = OffsetofType, "(", Type, ",", OffsetofPath, ")" => ActionFn(85);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant35(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action85::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (6, 49)
    }
    pub(crate) fn __reduce124<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprTerminal = id => ActionFn(86);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce125<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprValue = "{", i128, "}" => ActionFn(57);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action57::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 50)
    }
    pub(crate) fn __reduce126<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprValue? = ExprValue => ActionFn(112);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action112::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce127<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // ExprValue? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 51)
    }
    pub(crate) fn __reduce128<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // FieldIndex = id => ActionFn(97);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce130<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // FieldLayout? = FieldLayout => ActionFn(124);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce131<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // FieldLayout? =  => ActionFn(125);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action125::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce132<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Index<ArrayIndex> = ArrayIndex => ActionFn(253);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action253::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce133<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Index<FieldIndex> = FieldIndex => ActionFn(254);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce134<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // MulExpr = BinaryExpr<UnaryExpr, MulExprType> => ActionFn(73);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce135<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // MulExprType = "*" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce136<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // MulExprType = "/" => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // MulExprType = "%" => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce138<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofPath = Index<ArrayIndex> => ActionFn(92);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce139<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofPath = Index<FieldIndex> => ActionFn(93);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce140<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofPath = OffsetofPath, Index<ArrayIndex> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce141<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofPath = OffsetofPath, ".", Index<FieldIndex> => ActionFn(95);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant34(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action95::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (3, 59)
    }
    pub(crate) fn __reduce142<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofType = "offsetof" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce143<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OffsetofType = "offsetof_bits" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce145<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OrExpr = BinaryExpr<AndExpr, OrExprType> => ActionFn(59);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce146<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // OrExprType = "||" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce147<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = FieldLayout, RecordFieldName, Type, ":", TopLevelExpr => ActionFn(289);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant2(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant39(__symbols);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action289::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 64)
    }
    pub(crate) fn __reduce148<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = RecordFieldName, Type, ":", TopLevelExpr => ActionFn(290);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action290::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 64)
    }
    pub(crate) fn __reduce149<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = FieldLayout, (<Annotation>)+, RecordFieldName, Type, ":", TopLevelExpr => ActionFn(291);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant2(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant39(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action291::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 64)
    }
    pub(crate) fn __reduce150<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = (<Annotation>)+, RecordFieldName, Type, ":", TopLevelExpr => ActionFn(292);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant2(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant39(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action292::<>(state, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 64)
    }
    pub(crate) fn __reduce151<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = FieldLayout, RecordFieldName, Type => ActionFn(293);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant39(__symbols);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action293::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce152<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = RecordFieldName, Type => ActionFn(294);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action294::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 64)
    }
    pub(crate) fn __reduce153<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = FieldLayout, (<Annotation>)+, RecordFieldName, Type => ActionFn(295);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant39(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action295::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 64)
    }
    pub(crate) fn __reduce154<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField = (<Annotation>)+, RecordFieldName, Type => ActionFn(296);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant39(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action296::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce155<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField? = RecordField => ActionFn(147);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action147::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce156<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordField? =  => ActionFn(148);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action148::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 65)
    }
    pub(crate) fn __reduce157<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordFieldName = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce158<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordFieldName = id => ActionFn(23);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce159<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordKind = "struct" => ActionFn(19);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce160<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RecordKind = "union" => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce161<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExpr = BinaryExpr<SumExpr, RelExprType> => ActionFn(63);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce162<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = "==" => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce163<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = "!=" => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce164<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = "<=" => ActionFn(66);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce165<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = ">=" => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce166<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = "<" => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce167<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // RelExprType = ">" => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce168<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<AndExpr> = AndExpr => ActionFn(260);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce169<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<BinaryExpr<AndExpr, OrExprType>> = BinaryExpr<AndExpr, OrExprType> => ActionFn(261);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action261::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce170<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<BinaryExpr<MulExpr, SumExprType>> = BinaryExpr<MulExpr, SumExprType> => ActionFn(262);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce171<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<BinaryExpr<RelExpr, AndExprType>> = BinaryExpr<RelExpr, AndExprType> => ActionFn(263);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action263::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce172<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<BinaryExpr<SumExpr, RelExprType>> = BinaryExpr<SumExpr, RelExprType> => ActionFn(264);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action264::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce173<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<BinaryExpr<UnaryExpr, MulExprType>> = BinaryExpr<UnaryExpr, MulExprType> => ActionFn(265);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action265::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce174<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<MulExpr> = MulExpr => ActionFn(266);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action266::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce175<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<OrExpr> = OrExpr => ActionFn(267);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action267::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce176<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<RelExpr> = RelExpr => ActionFn(268);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action268::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce177<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<SumExpr> = SumExpr => ActionFn(269);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce178<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SpannedExpr<UnaryExpr> = UnaryExpr => ActionFn(270);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action270::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce179<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SumExpr = BinaryExpr<MulExpr, SumExprType> => ActionFn(70);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce180<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SumExprType = "+" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce181<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // SumExprType = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce182<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Top = (<Declaration>)+ => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce183<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TopLevelExpr = ExprValue, Expr => ActionFn(287);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action287::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 84)
    }
    pub(crate) fn __reduce184<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TopLevelExpr = Expr => ActionFn(288);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce185<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TopLevelExpr? = TopLevelExpr => ActionFn(127);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action127::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce186<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TopLevelExpr? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 85)
    }
    pub(crate) fn __reduce187<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Type = TypeLayout, TypeVariant => ActionFn(307);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant45(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action307::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 86)
    }
    pub(crate) fn __reduce188<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Type = TypeVariant => ActionFn(308);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action308::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce189<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Type = TypeLayout, Annotation+, TypeVariant => ActionFn(309);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant45(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action309::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (3, 86)
    }
    pub(crate) fn __reduce190<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // Type = Annotation+, TypeVariant => ActionFn(310);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant45(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action310::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 86)
    }
    pub(crate) fn __reduce191<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeExprType = "sizeof" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce192<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeExprType = "alignof" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce194<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeLayout? = TypeLayout => ActionFn(134);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action134::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce195<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeLayout? =  => ActionFn(135);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action135::<>(state, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (0, 89)
    }
    pub(crate) fn __reduce196<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = BuiltinType => ActionFn(12);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce197<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = RecordKind, "{", Comma<RecordField>, "}" => ActionFn(13);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant23(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant40(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action13::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 90)
    }
    pub(crate) fn __reduce198<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = "[", TopLevelExpr, "]", Type => ActionFn(305);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action305::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 90)
    }
    pub(crate) fn __reduce199<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = "[", "]", Type => ActionFn(306);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action306::<>(state, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (3, 90)
    }
    pub(crate) fn __reduce200<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = "typedef", Type => ActionFn(15);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action15::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (2, 90)
    }
    pub(crate) fn __reduce201<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = "opaque", OpaqueTypeLayout => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action16::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (2, 90)
    }
    pub(crate) fn __reduce202<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = "enum", "{", Comma<TopLevelExpr>, "}" => ActionFn(17);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action17::<>(state, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 90)
    }
    pub(crate) fn __reduce203<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // TypeVariant = id => ActionFn(274);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action274::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce204<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // UnaryExpr = ExprTerminal => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 91)
    }
    pub(crate) fn __reduce205<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // UnaryExpr = UnaryExprType, SpannedExpr<UnaryExpr> => ActionFn(78);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action78::<>(state, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 91)
    }
    pub(crate) fn __reduce206<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // UnaryExprType = "!" => ActionFn(79);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce207<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // UnaryExprType = "-" => ActionFn(80);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce210<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce211<
        'input,
        'a,
    >(
        state: &'a mut State,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'a ())>,
    ) -> (usize, usize)
    {
        // number = r#"(0x[0-9a-fA-F_]+|[0-9]+|0o[0-7]+|0b[01]+)"# => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(state, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 96)
    }
}
pub(crate) use self::__parse__Top::TopParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use repr_c::layout::{BuiltinType, RecordKind, TypeLayout, FieldLayout};
    use crate::ast::{
    Type, TypeVariant, Declaration, Record, RecordField, Array, Expr,
    UnaryExprType, BinaryExprType, TypeExprType, Annotation, OpaqueTypeLayout, ExprType, BuiltinExpr,
    DeclarationType, OffsetofType, IndexType, Index, Span, State,
};
    use crate::result::{CustomError};
    use std::collections::HashMap;
    use crate::parser_util::{parse_type_layout, components_to_hashmap, parse_field_layout, parse_number};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^((0x[0-9A-F_a-f]+|[0-9]+|0o[0-7]+|0b[0-1]+))", false),
            ("^([A-Z_a-z][0-9A-Z_a-z]*)", false),
            ("^(!)", false),
            ("^(!=)", false),
            ("^(%)", false),
            ("^(\\&\\&)", false),
            ("^(\\()", false),
            ("^(\\(\\))", false),
            ("^(\\))", false),
            ("^(\\*)", false),
            ("^(\\+)", false),
            ("^(,)", false),
            ("^(\\-)", false),
            ("^(\\.)", false),
            ("^(/)", false),
            ("^(:)", false),
            ("^(<)", false),
            ("^(<=)", false),
            ("^(=)", false),
            ("^(==)", false),
            ("^(>)", false),
            ("^(>=)", false),
            ("^(@)", false),
            ("^(BITS_PER_BYTE)", false),
            ("^(\\[)", false),
            ("^(\\])", false),
            ("^(_)", false),
            ("^(align)", false),
            ("^(alignof)", false),
            ("^(attr_packed)", false),
            ("^(bool)", false),
            ("^(char)", false),
            ("^(const)", false),
            ("^(double)", false),
            ("^(enum)", false),
            ("^(f32)", false),
            ("^(f64)", false),
            ("^(float)", false),
            ("^(i128)", false),
            ("^(i16)", false),
            ("^(i32)", false),
            ("^(i64)", false),
            ("^(i8)", false),
            ("^(int)", false),
            ("^(long)", false),
            ("^(offsetof)", false),
            ("^(offsetof_bits)", false),
            ("^(opaque)", false),
            ("^(pragma_pack)", false),
            ("^(ptr)", false),
            ("^(short)", false),
            ("^(signed)", false),
            ("^(sizeof)", false),
            ("^(struct)", false),
            ("^(typedef)", false),
            ("^(u128)", false),
            ("^(u16)", false),
            ("^(u32)", false),
            ("^(u64)", false),
            ("^(u8)", false),
            ("^(union)", false),
            ("^(unsigned)", false),
            ("^(\\{)", false),
            ("^(\\|\\|)", false),
            ("^(\\})", false),
            ("^([\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}-\u{2029}\u{202f}\u{205f}\u{3000}]*)", true),
            ("^(//[\u{0}-\t\u{b}-\u{c}\u{e}-\u{10ffff}]*[\n\r]*)", true),
            ("^(/\\*([\u{0}-\\)\\+-\u{10ffff}]*\\*+[\u{0}-\\)\\+-\\.0-\u{10ffff}])*([\u{0}-\\)\\+-\u{10ffff}]*\\*+|[\u{0}-\\)\\+-\u{10ffff}])*\\*/)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, alloc::vec::Vec<Declaration>, usize),
) -> alloc::vec::Vec<Declaration> {
    __0
}

#[allow(unused_variables)]
fn __action1<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, alloc::vec::Vec<Declaration>, usize),
) -> alloc::vec::Vec<Declaration> {
    __0
}

#[allow(unused_variables)]
fn __action2<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, d, _): (usize, (usize, usize, String, DeclarationType), usize),
) -> Declaration {
    Declaration {
        span: Span(d.0, d.1),
        name: d.2,
        ty: d.3,
    }
}

#[allow(unused_variables)]
fn __action3<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, name, _): (usize, String, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, Type, usize),
) -> (usize, usize, String, DeclarationType) {
    (l, r, name, DeclarationType::Type(ty))
}

#[allow(unused_variables)]
fn __action4<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, l, _): (usize, usize, usize),
    (_, name, _): (usize, String, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Expr, usize),
) -> (usize, usize, String, DeclarationType) {
    (l, r, name, DeclarationType::Const(e))
}

#[allow(unused_variables)]
fn __action5<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, layout, _): (usize, core::option::Option<TypeLayout>, usize),
    (_, layout_hi, _): (usize, usize, usize),
    (_, annotations, _): (usize, alloc::vec::Vec<Annotation>, usize),
    (_, mut variant, _): (usize, TypeVariant, usize),
) -> Type {
    {
        let id = state.next_id;
        state.next_id += 1;
        if let TypeVariant::Record(r) = &mut variant {
            let mut pos = 0;
            for f in &mut r.fields {
                f.parent_id = id;
                if f.name.is_some() {
                    f.pos = Some(pos);
                    pos += 1;
                }
            }
        }
        Type {
            id,
            lo,
            layout,
            layout_hi,
            annotations,
            variant,
        }
    }
}

#[allow(unused_variables)]
fn __action6<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, c, _): (usize, HashMap<String, (u64, Span)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, hi, _): (usize, usize, usize),
) -> Result<TypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    {
        let [size, field, pointer, required] = parse_type_layout(&c, Span(lo, hi), 8)?;
        Ok(TypeLayout {
            size_bits: size,
            field_alignment_bits: field,
            pointer_alignment_bits: pointer,
            required_alignment_bits: required,
        })
    }
}

#[allow(unused_variables)]
fn __action7<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, c, _): (usize, HashMap<String, (Expr, Span)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, hi, _): (usize, usize, usize),
) -> Result<OpaqueTypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    {
        let def = Expr {
            span: Span(lo, hi),
            value: Some(8),
            value_hi: hi,
            ty: ExprType::Lit(8),
        };
        let [size, field, pointer, required] = parse_type_layout(&c, Span(lo, hi), def)?;
        Ok(OpaqueTypeLayout {
            size_bits: Box::new(size),
            field_alignment_bits: Box::new(field),
            pointer_alignment_bits: Box::new(pointer),
            required_alignment_bits: Box::new(required),
        })
    }
}

#[allow(unused_variables)]
fn __action8<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, c, _): (usize, HashMap<String, (u64, Span)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, hi, _): (usize, usize, usize),
) -> Result<FieldLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    parse_field_layout(&c, Span(lo, hi))
}

#[allow(unused_variables)]
fn __action9<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, Expr, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Annotation {
    Annotation::PragmaPack(Box::new(n))
}

#[allow(unused_variables)]
fn __action10<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> Annotation {
    Annotation::AttrPacked
}

#[allow(unused_variables)]
fn __action11<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, Expr, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Annotation {
    Annotation::Aligned(Box::new(n))
}

#[allow(unused_variables)]
fn __action12<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, b, _): (usize, BuiltinType, usize),
) -> TypeVariant {
    TypeVariant::Builtin(b)
}

#[allow(unused_variables)]
fn __action13<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, kind, _): (usize, RecordKind, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, fields, _): (usize, Vec<RecordField>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> TypeVariant {
    TypeVariant::Record(Record { kind, fields })
}

#[allow(unused_variables)]
fn __action14<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, core::option::Option<Expr>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type, usize),
) -> TypeVariant {
    TypeVariant::Array(Array {
        element_type: Box::new(t),
        num_elements: n.map(Box::new),
    })
}

#[allow(unused_variables)]
fn __action15<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type, usize),
) -> TypeVariant {
    TypeVariant::Typedef(Box::new(t))
}

#[allow(unused_variables)]
fn __action16<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, l, _): (usize, OpaqueTypeLayout, usize),
) -> TypeVariant {
    TypeVariant::Opaque(l)
}

#[allow(unused_variables)]
fn __action17<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Expr>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> TypeVariant {
    TypeVariant::Enum(__0)
}

#[allow(unused_variables)]
fn __action18<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, n, _): (usize, String, usize),
    (_, r, _): (usize, usize, usize),
) -> TypeVariant {
    TypeVariant::Name(n, Span(l, r))
}

#[allow(unused_variables)]
fn __action19<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> RecordKind {
    RecordKind::Struct
}

#[allow(unused_variables)]
fn __action20<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> RecordKind {
    RecordKind::Union
}

#[allow(unused_variables)]
fn __action21<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, layout, _): (usize, core::option::Option<FieldLayout>, usize),
    (_, layout_hi, _): (usize, usize, usize),
    (_, annotations, _): (usize, alloc::vec::Vec<Annotation>, usize),
    (_, name, _): (usize, Option<String>, usize),
    (_, ty, _): (usize, Type, usize),
    (_, bit_width, _): (usize, core::option::Option<Expr>, usize),
) -> RecordField {
    RecordField {
        pos: None,
        parent_id: 0,
        lo,
        layout,
        layout_hi,
        annotations,
        name,
        ty,
        bit_width: bit_width.map(Box::new),
    }
}

#[allow(unused_variables)]
fn __action22<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Option<String> {
    None
}

#[allow(unused_variables)]
fn __action23<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, n, _): (usize, String, usize),
) -> Option<String> {
    Some(n)
}

#[allow(unused_variables)]
fn __action24<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Unit
}

#[allow(unused_variables)]
fn __action25<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Bool
}

#[allow(unused_variables)]
fn __action26<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::U8
}

#[allow(unused_variables)]
fn __action27<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::U16
}

#[allow(unused_variables)]
fn __action28<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::U32
}

#[allow(unused_variables)]
fn __action29<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::U64
}

#[allow(unused_variables)]
fn __action30<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::U128
}

#[allow(unused_variables)]
fn __action31<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::I8
}

#[allow(unused_variables)]
fn __action32<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::I16
}

#[allow(unused_variables)]
fn __action33<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::I32
}

#[allow(unused_variables)]
fn __action34<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::I64
}

#[allow(unused_variables)]
fn __action35<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::I128
}

#[allow(unused_variables)]
fn __action36<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Char
}

#[allow(unused_variables)]
fn __action37<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::SignedChar
}

#[allow(unused_variables)]
fn __action38<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::UnsignedChar
}

#[allow(unused_variables)]
fn __action39<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, core::option::Option<&'input str>, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Short
}

#[allow(unused_variables)]
fn __action40<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::UnsignedShort
}

#[allow(unused_variables)]
fn __action41<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, core::option::Option<&'input str>, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Int
}

#[allow(unused_variables)]
fn __action42<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, core::option::Option<&'input str>, usize),
) -> BuiltinType {
    BuiltinType::UnsignedInt
}

#[allow(unused_variables)]
fn __action43<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, core::option::Option<&'input str>, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Long
}

#[allow(unused_variables)]
fn __action44<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::UnsignedLong
}

#[allow(unused_variables)]
fn __action45<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, core::option::Option<&'input str>, usize),
    (_, __1, _): (usize, &'input str, usize),
    (_, __2, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::LongLong
}

#[allow(unused_variables)]
fn __action46<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
    (_, __2, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::UnsignedLongLong
}

#[allow(unused_variables)]
fn __action47<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::F32
}

#[allow(unused_variables)]
fn __action48<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::F64
}

#[allow(unused_variables)]
fn __action49<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Float
}

#[allow(unused_variables)]
fn __action50<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Double
}

#[allow(unused_variables)]
fn __action51<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinType {
    BuiltinType::Pointer
}

#[allow(unused_variables)]
fn __action52<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, hi, _): (usize, usize, usize),
) -> Result<u64, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    parse_number(s, Span(lo, hi))
}

#[allow(unused_variables)]
fn __action53<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, hi, _): (usize, usize, usize),
) -> Result<i128, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    parse_number(s, Span(lo, hi))
}

#[allow(unused_variables)]
fn __action54<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
fn __action55<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> String {
    s.to_string()
}

#[allow(unused_variables)]
fn __action56<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, v, _): (usize, core::option::Option<i128>, usize),
    (_, value_hi, _): (usize, usize, usize),
    (_, mut e, _): (usize, Expr, usize),
) -> Expr {
    {
        if v.is_some() {
            e.value = v;
        } else if let ExprType::Lit(v) = e.ty {
            e.value = Some(v);
        }
        e.span.0 = lo;
        e.value_hi = value_hi;
        e
    }
}

#[allow(unused_variables)]
fn __action57<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, i128, usize),
    (_, _, _): (usize, &'input str, usize),
) -> i128 {
    __0
}

#[allow(unused_variables)]
fn __action58<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Expr, usize),
) -> Expr {
    __0
}

#[allow(unused_variables)]
fn __action59<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action60<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::LogicalOr
}

#[allow(unused_variables)]
fn __action61<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action62<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::LogicalAnd
}

#[allow(unused_variables)]
fn __action63<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action64<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Eq
}

#[allow(unused_variables)]
fn __action65<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::NotEq
}

#[allow(unused_variables)]
fn __action66<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Le
}

#[allow(unused_variables)]
fn __action67<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Ge
}

#[allow(unused_variables)]
fn __action68<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Lt
}

#[allow(unused_variables)]
fn __action69<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Gt
}

#[allow(unused_variables)]
fn __action70<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action71<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Add
}

#[allow(unused_variables)]
fn __action72<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Sub
}

#[allow(unused_variables)]
fn __action73<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action74<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Mul
}

#[allow(unused_variables)]
fn __action75<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Div
}

#[allow(unused_variables)]
fn __action76<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinaryExprType {
    BinaryExprType::Mod
}

#[allow(unused_variables)]
fn __action77<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action78<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, k, _): (usize, UnaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Unary(k, Box::new(r))
}

#[allow(unused_variables)]
fn __action79<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> UnaryExprType {
    UnaryExprType::Not
}

#[allow(unused_variables)]
fn __action80<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> UnaryExprType {
    UnaryExprType::Neg
}

#[allow(unused_variables)]
fn __action81<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, &'input str, usize),
) -> ExprType {
    e.ty
}

#[allow(unused_variables)]
fn __action82<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, BuiltinExpr, usize),
) -> ExprType {
    ExprType::Builtin(__0)
}

#[allow(unused_variables)]
fn __action83<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, i128, usize),
) -> ExprType {
    ExprType::Lit(__0)
}

#[allow(unused_variables)]
fn __action84<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, e, _): (usize, TypeExprType, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type, usize),
    (_, _, _): (usize, &'input str, usize),
) -> ExprType {
    ExprType::TypeExpr(e, Box::new(t))
}

#[allow(unused_variables)]
fn __action85<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, e, _): (usize, OffsetofType, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Vec<Index>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> ExprType {
    ExprType::Offsetof(e, t, p)
}

#[allow(unused_variables)]
fn __action86<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> ExprType {
    ExprType::Name(__0)
}

#[allow(unused_variables)]
fn __action87<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BuiltinExpr {
    BuiltinExpr::BitsPerByte
}

#[allow(unused_variables)]
fn __action88<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> TypeExprType {
    TypeExprType::Sizeof
}

#[allow(unused_variables)]
fn __action89<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> TypeExprType {
    TypeExprType::Alignof
}

#[allow(unused_variables)]
fn __action90<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> OffsetofType {
    OffsetofType::Bytes
}

#[allow(unused_variables)]
fn __action91<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> OffsetofType {
    OffsetofType::Bits
}

#[allow(unused_variables)]
fn __action92<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Index, usize),
) -> Vec<Index> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action93<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Index, usize),
) -> Vec<Index> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action94<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, mut p, _): (usize, Vec<Index>, usize),
    (_, n, _): (usize, Index, usize),
) -> Vec<Index> {
    {
        p.push(n);
        p
    }
}

#[allow(unused_variables)]
fn __action95<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, mut p, _): (usize, Vec<Index>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, Index, usize),
) -> Vec<Index> {
    {
        p.push(n);
        p
    }
}

#[allow(unused_variables)]
fn __action96<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, &'input str, usize),
) -> IndexType {
    IndexType::Array(Box::new(e))
}

#[allow(unused_variables)]
fn __action97<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> IndexType {
    IndexType::Field(__0)
}

#[allow(unused_variables)]
fn __action98<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, IndexType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Index {
    Index {
        span: Span(lo, hi),
        ty,
    }
}

#[allow(unused_variables)]
fn __action99<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, IndexType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Index {
    Index {
        span: Span(lo, hi),
        ty,
    }
}

#[allow(unused_variables)]
fn __action100<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action101<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action102<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, Expr, usize),
    (_, s, _): (usize, BinaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Binary(s, Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action103<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action104<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, Expr, usize),
    (_, s, _): (usize, BinaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Binary(s, Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action105<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action106<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, Expr, usize),
    (_, s, _): (usize, BinaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Binary(s, Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action107<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action108<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, Expr, usize),
    (_, s, _): (usize, BinaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Binary(s, Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action109<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, ExprType, usize),
) -> ExprType {
    __0
}

#[allow(unused_variables)]
fn __action110<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, l, _): (usize, Expr, usize),
    (_, s, _): (usize, BinaryExprType, usize),
    (_, r, _): (usize, Expr, usize),
) -> ExprType {
    ExprType::Binary(s, Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action111<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action112<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, i128, usize),
) -> core::option::Option<i128> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action113<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<i128> {
    None
}

#[allow(unused_variables)]
fn __action114<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> core::option::Option<&'input str> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action115<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<&'input str> {
    None
}

#[allow(unused_variables)]
fn __action116<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> core::option::Option<&'input str> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action117<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<&'input str> {
    None
}

#[allow(unused_variables)]
fn __action118<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Expr, usize),
) -> core::option::Option<Expr> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action119<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Expr> {
    None
}

#[allow(unused_variables)]
fn __action120<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Expr, usize),
) -> Expr {
    __0
}

#[allow(unused_variables)]
fn __action121<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Annotation> {
    vec![]
}

#[allow(unused_variables)]
fn __action122<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
) -> alloc::vec::Vec<Annotation> {
    v
}

#[allow(unused_variables)]
fn __action123<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Annotation, usize),
) -> Annotation {
    __0
}

#[allow(unused_variables)]
fn __action124<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, FieldLayout, usize),
) -> core::option::Option<FieldLayout> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action125<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<FieldLayout> {
    None
}

#[allow(unused_variables)]
fn __action126<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, head, _): (usize, alloc::vec::Vec<Expr>, usize),
    (_, tail, _): (usize, core::option::Option<Expr>, usize),
) -> Vec<Expr> {
    head.into_iter().chain(tail.into_iter()).collect()
}

#[allow(unused_variables)]
fn __action127<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Expr, usize),
) -> core::option::Option<Expr> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action128<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Expr> {
    None
}

#[allow(unused_variables)]
fn __action129<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, head, _): (usize, alloc::vec::Vec<RecordField>, usize),
    (_, tail, _): (usize, core::option::Option<RecordField>, usize),
) -> Vec<RecordField> {
    head.into_iter().chain(tail.into_iter()).collect()
}

#[allow(unused_variables)]
fn __action130<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, c, _): (usize, Vec<(String, Expr, Span)>, usize),
) -> Result<
    HashMap<String, (Expr, Span)>,
    __lalrpop_util::ParseError<usize, Token<'input>, CustomError>,
> {
    components_to_hashmap(c)
}

#[allow(unused_variables)]
fn __action131<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, c, _): (usize, Vec<(String, u64, Span)>, usize),
) -> Result<
    HashMap<String, (u64, Span)>,
    __lalrpop_util::ParseError<usize, Token<'input>, CustomError>,
> {
    components_to_hashmap(c)
}

#[allow(unused_variables)]
fn __action132<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Annotation> {
    vec![]
}

#[allow(unused_variables)]
fn __action133<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
) -> alloc::vec::Vec<Annotation> {
    v
}

#[allow(unused_variables)]
fn __action134<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, TypeLayout, usize),
) -> core::option::Option<TypeLayout> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action135<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<TypeLayout> {
    None
}

#[allow(unused_variables)]
fn __action136<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize {
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action137<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize {
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action138<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Declaration, usize),
) -> alloc::vec::Vec<Declaration> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action139<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Declaration>, usize),
    (_, e, _): (usize, Declaration, usize),
) -> alloc::vec::Vec<Declaration> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action140<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Declaration, usize),
) -> Declaration {
    __0
}

#[allow(unused_variables)]
fn __action141<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action142<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
    (_, e, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action143<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, head, _): (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
    (_, tail, _): (usize, core::option::Option<(String, u64, Span)>, usize),
) -> Vec<(String, u64, Span)> {
    head.into_iter().chain(tail.into_iter()).collect()
}

#[allow(unused_variables)]
fn __action144<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, c, _): (usize, String, usize),
    (_, hi, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u64, usize),
) -> (String, u64, Span) {
    (c, n, Span(lo, hi))
}

#[allow(unused_variables)]
fn __action145<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, head, _): (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
    (_, tail, _): (usize, core::option::Option<(String, Expr, Span)>, usize),
) -> Vec<(String, Expr, Span)> {
    head.into_iter().chain(tail.into_iter()).collect()
}

#[allow(unused_variables)]
fn __action146<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, c, _): (usize, String, usize),
    (_, hi, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, Expr, usize),
) -> (String, Expr, Span) {
    (c, n, Span(lo, hi))
}

#[allow(unused_variables)]
fn __action147<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, RecordField, usize),
) -> core::option::Option<RecordField> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action148<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<RecordField> {
    None
}

#[allow(unused_variables)]
fn __action149<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<RecordField> {
    vec![]
}

#[allow(unused_variables)]
fn __action150<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<RecordField>, usize),
) -> alloc::vec::Vec<RecordField> {
    v
}

#[allow(unused_variables)]
fn __action151<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, RecordField, usize),
    (_, _, _): (usize, &'input str, usize),
) -> RecordField {
    __0
}

#[allow(unused_variables)]
fn __action152<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Expr> {
    vec![]
}

#[allow(unused_variables)]
fn __action153<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Expr>, usize),
) -> alloc::vec::Vec<Expr> {
    v
}

#[allow(unused_variables)]
fn __action154<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Expr, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr {
    __0
}

#[allow(unused_variables)]
fn __action155<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action156<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
    (_, e, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action157<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action158<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action159<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action160<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action161<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action162<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action163<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action164<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action165<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, lo, _): (usize, usize, usize),
    (_, ty, _): (usize, ExprType, usize),
    (_, hi, _): (usize, usize, usize),
) -> Expr {
    Expr {
        span: Span(lo, hi),
        value: None,
        value_hi: lo,
        ty,
    }
}

#[allow(unused_variables)]
fn __action166<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, Expr, usize),
) -> alloc::vec::Vec<Expr> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action167<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Expr>, usize),
    (_, e, _): (usize, Expr, usize),
) -> alloc::vec::Vec<Expr> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action168<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, RecordField, usize),
) -> alloc::vec::Vec<RecordField> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action169<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<RecordField>, usize),
    (_, e, _): (usize, RecordField, usize),
) -> alloc::vec::Vec<RecordField> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action170<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, Expr, Span), usize),
) -> core::option::Option<(String, Expr, Span)> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action171<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<(String, Expr, Span)> {
    None
}

#[allow(unused_variables)]
fn __action172<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<(String, Expr, Span)> {
    vec![]
}

#[allow(unused_variables)]
fn __action173<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
) -> alloc::vec::Vec<(String, Expr, Span)> {
    v
}

#[allow(unused_variables)]
fn __action174<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, Expr, Span), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (String, Expr, Span) {
    __0
}

#[allow(unused_variables)]
fn __action175<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, u64, Span), usize),
) -> core::option::Option<(String, u64, Span)> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action176<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<(String, u64, Span)> {
    None
}

#[allow(unused_variables)]
fn __action177<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<(String, u64, Span)> {
    vec![]
}

#[allow(unused_variables)]
fn __action178<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
) -> alloc::vec::Vec<(String, u64, Span)> {
    v
}

#[allow(unused_variables)]
fn __action179<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, u64, Span), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (String, u64, Span) {
    __0
}

#[allow(unused_variables)]
fn __action180<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, u64, Span), usize),
) -> alloc::vec::Vec<(String, u64, Span)> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action181<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
    (_, e, _): (usize, (String, u64, Span), usize),
) -> alloc::vec::Vec<(String, u64, Span)> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action182<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, __0, _): (usize, (String, Expr, Span), usize),
) -> alloc::vec::Vec<(String, Expr, Span)> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action183<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
    (_, e, _): (usize, (String, Expr, Span), usize),
) -> alloc::vec::Vec<(String, Expr, Span)> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action184<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action114(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action42(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action185<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action115(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action42(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action186<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action39(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action187<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action39(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action188<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action41(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action189<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action41(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action190<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action43(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action191<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action43(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action192<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action45(state, input, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action193<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> BuiltinType {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action45(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action194<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Expr, usize),
) -> core::option::Option<Expr> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action120(state, input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action118(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action195<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, alloc::vec::Vec<Annotation>, usize),
    __4: (usize, Option<String>, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __6.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action194(state, input, __6, __7);
    let __temp0 = (__start0, __temp0, __end0);
    __action21(state, input, __0, __1, __2, __3, __4, __5, __temp0)
}

#[allow(unused_variables)]
fn __action196<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, alloc::vec::Vec<Annotation>, usize),
    __4: (usize, Option<String>, usize),
    __5: (usize, Type, usize),
) -> RecordField {
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action119(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action21(state, input, __0, __1, __2, __3, __4, __5, __temp0)
}

#[allow(unused_variables)]
fn __action197<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action123(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action155(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action198<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Annotation>, usize),
    __1: (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action123(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action156(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action199<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<String>, usize),
    __4: (usize, Type, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action121(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action195(state, input, __0, __1, __2, __temp0, __3, __4, __5, __6)
}

#[allow(unused_variables)]
fn __action200<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, alloc::vec::Vec<Annotation>, usize),
    __4: (usize, Option<String>, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action122(state, input, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action195(state, input, __0, __1, __2, __temp0, __4, __5, __6, __7)
}

#[allow(unused_variables)]
fn __action201<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<String>, usize),
    __4: (usize, Type, usize),
) -> RecordField {
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action121(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action196(state, input, __0, __1, __2, __temp0, __3, __4)
}

#[allow(unused_variables)]
fn __action202<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, core::option::Option<FieldLayout>, usize),
    __2: (usize, usize, usize),
    __3: (usize, alloc::vec::Vec<Annotation>, usize),
    __4: (usize, Option<String>, usize),
    __5: (usize, Type, usize),
) -> RecordField {
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action122(state, input, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action196(state, input, __0, __1, __2, __temp0, __4, __5)
}

#[allow(unused_variables)]
fn __action203<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, (String, Expr, Span), usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, Expr, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action174(state, input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action182(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action204<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
    __1: (usize, (String, Expr, Span), usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, Expr, Span)> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action174(state, input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action183(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action205<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<(String, Expr, Span)>, usize),
) -> Vec<(String, Expr, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action172(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action145(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action206<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
    __1: (usize, core::option::Option<(String, Expr, Span)>, usize),
) -> Vec<(String, Expr, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action173(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action145(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action207<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, (String, u64, Span), usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, u64, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action179(state, input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action180(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action208<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
    __1: (usize, (String, u64, Span), usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, u64, Span)> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action179(state, input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action181(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action209<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<(String, u64, Span)>, usize),
) -> Vec<(String, u64, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action177(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action143(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action210<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
    __1: (usize, core::option::Option<(String, u64, Span)>, usize),
) -> Vec<(String, u64, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action178(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action143(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action211<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Declaration, usize),
) -> alloc::vec::Vec<Declaration> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action140(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action138(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action212<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Declaration>, usize),
    __1: (usize, Declaration, usize),
) -> alloc::vec::Vec<Declaration> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action140(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action139(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action213<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, RecordField, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<RecordField> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action151(state, input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action168(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action214<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<RecordField>, usize),
    __1: (usize, RecordField, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<RecordField> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action151(state, input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action169(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action215<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<RecordField>, usize),
) -> Vec<RecordField> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action149(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action129(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action216<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<RecordField>, usize),
    __1: (usize, core::option::Option<RecordField>, usize),
) -> Vec<RecordField> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action150(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action129(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action217<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Expr, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Expr> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action154(state, input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action166(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action218<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Expr> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action154(state, input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action167(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action219<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<Expr>, usize),
) -> Vec<Expr> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action152(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action126(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action220<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr>, usize),
    __1: (usize, core::option::Option<Expr>, usize),
) -> Vec<Expr> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action153(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action126(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action221<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Expr, usize),
) -> (String, Expr, Span) {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __0.2.clone();
    let __end1 = __1.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action137(state, input, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action146(state, input, __temp0, __0, __temp1, __1, __2)
}

#[allow(unused_variables)]
fn __action222<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, u64, usize),
) -> (String, u64, Span) {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __0.2.clone();
    let __end1 = __1.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action137(state, input, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action144(state, input, __temp0, __0, __temp1, __1, __2)
}

#[allow(unused_variables)]
fn __action223<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Type, usize),
) -> (usize, usize, String, DeclarationType) {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action3(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action224<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Expr, usize),
) -> (usize, usize, String, DeclarationType) {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action4(state, input, __0, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
fn __action225<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (u64, Span)>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Result<FieldLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action8(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action226<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, IndexType, usize),
    __1: (usize, usize, usize),
) -> Index {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action99(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action227<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, IndexType, usize),
    __1: (usize, usize, usize),
) -> Index {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action98(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action228<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (Expr, Span)>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Result<OpaqueTypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action7(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action229<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, usize, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action199(state, input, __temp0, __0, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
fn __action230<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, usize, usize),
    __2: (usize, alloc::vec::Vec<Annotation>, usize),
    __3: (usize, Option<String>, usize),
    __4: (usize, Type, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action200(state, input, __temp0, __0, __1, __2, __3, __4, __5, __6)
}

#[allow(unused_variables)]
fn __action231<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, usize, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action201(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action232<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, usize, usize),
    __2: (usize, alloc::vec::Vec<Annotation>, usize),
    __3: (usize, Option<String>, usize),
    __4: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action202(state, input, __temp0, __0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
fn __action233<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action157(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action234<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action158(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action235<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action164(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action236<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action160(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action237<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action162(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action238<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action165(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action239<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action163(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action240<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action111(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action241<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action159(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action242<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action161(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action243<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
    __1: (usize, usize, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action100(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action244<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<i128>, usize),
    __1: (usize, usize, usize),
    __2: (usize, Expr, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action56(state, input, __temp0, __0, __1, __2)
}

#[allow(unused_variables)]
fn __action245<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<TypeLayout>, usize),
    __1: (usize, usize, usize),
    __2: (usize, alloc::vec::Vec<Annotation>, usize),
    __3: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action5(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action246<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (u64, Span)>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Result<TypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action6(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action247<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, usize, usize),
) -> TypeVariant {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action18(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action248<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<i128, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action53(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action249<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<u64, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action137(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action52(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action250<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> (usize, usize, String, DeclarationType) {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action223(state, input, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action251<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Expr, usize),
) -> (usize, usize, String, DeclarationType) {
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action224(state, input, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
fn __action252<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (u64, Span)>, usize),
    __2: (usize, &'input str, usize),
) -> Result<FieldLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action225(state, input, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
fn __action253<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, IndexType, usize),
) -> Index {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action226(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action254<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, IndexType, usize),
) -> Index {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action227(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action255<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (Expr, Span)>, usize),
    __2: (usize, &'input str, usize),
) -> Result<OpaqueTypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action228(state, input, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
fn __action256<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action229(state, input, __0, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
fn __action257<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action230(state, input, __0, __temp0, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
fn __action258<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action231(state, input, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action259<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<FieldLayout>, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action232(state, input, __0, __temp0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action260<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action233(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action261<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action234(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action262<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action235(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action263<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action236(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action264<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action237(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action265<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action238(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action266<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action239(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action267<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action240(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action268<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action241(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action269<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action242(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action270<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, ExprType, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action243(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action271<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<i128>, usize),
    __1: (usize, Expr, usize),
) -> Expr {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action244(state, input, __0, __temp0, __1)
}

#[allow(unused_variables)]
fn __action272<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<TypeLayout>, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action245(state, input, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action273<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, HashMap<String, (u64, Span)>, usize),
    __2: (usize, &'input str, usize),
) -> Result<TypeLayout, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action246(state, input, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
fn __action274<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, String, usize),
) -> TypeVariant {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action247(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action275<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<i128, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action248(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action276<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<u64, __lalrpop_util::ParseError<usize, Token<'input>, CustomError>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action136(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action249(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action277<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<TypeLayout>, usize),
    __1: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action132(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action272(state, input, __0, __temp0, __1)
}

#[allow(unused_variables)]
fn __action278<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, core::option::Option<TypeLayout>, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action272(state, input, __0, __temp0, __2)
}

#[allow(unused_variables)]
fn __action279<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, (String, Expr, Span), usize),
) -> Vec<(String, Expr, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action170(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action205(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action280<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<(String, Expr, Span)> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action171(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action205(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action281<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
    __1: (usize, (String, Expr, Span), usize),
) -> Vec<(String, Expr, Span)> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action170(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action206(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action282<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Expr, Span)>, usize),
) -> Vec<(String, Expr, Span)> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action171(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action206(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action283<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, (String, u64, Span), usize),
) -> Vec<(String, u64, Span)> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action175(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action209(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action284<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<(String, u64, Span)> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action176(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action209(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action285<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
    __1: (usize, (String, u64, Span), usize),
) -> Vec<(String, u64, Span)> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action175(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action210(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action286<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, u64, Span)>, usize),
) -> Vec<(String, u64, Span)> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action176(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action210(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action287<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, i128, usize),
    __1: (usize, Expr, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action112(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action271(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action288<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Expr, usize),
) -> Expr {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action113(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action271(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action289<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, FieldLayout, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action124(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action256(state, input, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
fn __action290<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Option<String>, usize),
    __1: (usize, Type, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action125(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action256(state, input, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action291<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, FieldLayout, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action124(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action257(state, input, __temp0, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
fn __action292<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Annotation>, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Expr, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action125(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action257(state, input, __temp0, __0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
fn __action293<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, FieldLayout, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action124(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action258(state, input, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action294<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Option<String>, usize),
    __1: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action125(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action258(state, input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action295<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, FieldLayout, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, Option<String>, usize),
    __3: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action124(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action259(state, input, __temp0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action296<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Annotation>, usize),
    __1: (usize, Option<String>, usize),
    __2: (usize, Type, usize),
) -> RecordField {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action125(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action259(state, input, __temp0, __0, __1, __2)
}

#[allow(unused_variables)]
fn __action297<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, RecordField, usize),
) -> Vec<RecordField> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action147(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action215(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action298<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<RecordField> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action148(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action215(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action299<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<RecordField>, usize),
    __1: (usize, RecordField, usize),
) -> Vec<RecordField> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action147(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action216(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action300<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<RecordField>, usize),
) -> Vec<RecordField> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action148(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action216(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action301<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, Expr, usize),
) -> Vec<Expr> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action127(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action219(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action302<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Expr> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action128(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action219(state, input, __temp0)
}

#[allow(unused_variables)]
fn __action303<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr>, usize),
    __1: (usize, Expr, usize),
) -> Vec<Expr> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action127(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action220(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action304<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr>, usize),
) -> Vec<Expr> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action128(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action220(state, input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action305<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Expr, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Type, usize),
) -> TypeVariant {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action127(state, input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action14(state, input, __0, __temp0, __2, __3)
}

#[allow(unused_variables)]
fn __action306<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> TypeVariant {
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action128(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action14(state, input, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action307<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, TypeLayout, usize),
    __1: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action134(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action277(state, input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action308<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action135(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action277(state, input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action309<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, TypeLayout, usize),
    __1: (usize, alloc::vec::Vec<Annotation>, usize),
    __2: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action134(state, input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action278(state, input, __temp0, __1, __2)
}

#[allow(unused_variables)]
fn __action310<'input, 'a>(
    state: &'a mut State,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Annotation>, usize),
    __1: (usize, TypeVariant, usize),
) -> Type {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action135(state, input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action278(state, input, __temp0, __0, __1)
}

pub trait __ToTriple<'input, 'a> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, CustomError>,
    >;
}

impl<'input, 'a> __ToTriple<'input, 'a> for (usize, Token<'input>, usize) {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, CustomError>,
    > {
        Ok(value)
    }
}
impl<'input, 'a> __ToTriple<'input, 'a> for Result<(usize, Token<'input>, usize), CustomError> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, CustomError>,
    > {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
