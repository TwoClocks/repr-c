// If all fields in a struct have size 0, its size is set to its required alignment
// but at least to 4 bytes.
//
// ```c,msvc,msvc-tc-0026
// struct X {
//         __declspec(align(2)) long long b[];
// };
//
// struct Y {
//         __declspec(align(8)) long long b[];
// };
//
// static void f(void) {
//         static_assert(sizeof(struct X) == 4, "");
//         static_assert(_Alignof(struct X) == 8, "");
//
//         static_assert(sizeof(struct Y) == 8, "");
// }
// ```
X = { size: 32, alignment: 64, required_alignment: 16 }struct {
    { offset: 0, size: 0 }@align(2) b { size: 0, alignment: 64 }[]{ size: 64, alignment: 64 }long long,
}
Y = { size: 64, alignment: 64, required_alignment: 64 }struct {
    { offset: 0, size: 0 }@align(8) b { size: 0, alignment: 64 }[]{ size: 64, alignment: 64 }long long,
}
// hash: 6b68819bb6ef8695
