// The size of an array is the size of the underlying type multiplied by the
// number of elements. Since the size might not be a multiple of the field
// alignment, the address of the second element might not be properly aligned
// for the field alignment.
//
// ```c,msvc,msvc-tc-0018
// __declspec(align(4)) typedef char Char;
//
// typedef Char X[3];
//
// static void f(void) {
//         static_assert(sizeof(X) == 3, "");
//         static_assert(_Alignof(X) == 4, "");
// }
// ```
Char = @align(4) typedef char
X = [3]Char
