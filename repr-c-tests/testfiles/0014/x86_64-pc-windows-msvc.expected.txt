// __declspec(align) increases both the required and the field alignment but
// never decreases them. It does not affect the size or the pointer alignment.
//
// ```c,msvc,msvc-tc-0014
// __declspec(align(2)) typedef int A;
// __declspec(align(8)) typedef int B;
//
// #pragma pack(1)
//
// struct X {
//         A a;
// };
//
// struct Y {
//         B b;
// };
//
// static void f(void) {
//         static_assert(sizeof(A) == 4, "");
//         static_assert(_Alignof(A) == 4, "");
//
//         static_assert(sizeof(struct X) == 4, "");
//         static_assert(_Alignof(struct X) == 2, "");
//
//         static_assert(sizeof(B) == 4, "");
//         static_assert(_Alignof(B) == 8, "");
//
//         static_assert(sizeof(struct Y) == 8, "");
//         static_assert(_Alignof(struct Y) == 8, "");
// }
// ```
A = { size: 32, alignment: 32, required_alignment: 16 }@align(2) typedef { size: 32, alignment: 32 }int
B = { size: 32, alignment: 64, required_alignment: 64 }@align(8) typedef { size: 32, alignment: 32 }int
X = { size: 32, alignment: 16, required_alignment: 16 }@pragma_pack(1) struct {
    { offset: 0, size: 32 }a { size: 32, alignment: 32, required_alignment: 16 }A,
}
Y = { size: 64, alignment: 64, required_alignment: 64 }@pragma_pack(1) struct {
    { offset: 0, size: 32 }b { size: 32, alignment: 64, required_alignment: 64 }B,
}
// hash: ef485d3d38aab606
