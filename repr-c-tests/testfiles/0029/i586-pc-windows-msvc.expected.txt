// The required alignment of a record is the maximum of the required alignments of its
// fields except that the required alignment of bitfields is ignored.
//
// ```c,msvc,msvc-tc-0029
// __declspec(align(4)) typedef char Char;
//
// struct A {
//         Char a;
// };
//
// struct B {
//         Char a:1;
// };
//
// #pragma pack(1)
//
// struct C {
//         struct A a;
// };
//
// struct D {
//         struct B a;
// };
//
// static void f(void) {
//         static_assert(_Alignof(struct C) == 4, "");
//         static_assert(_Alignof(struct D) == 1, "");
// }
// ```
Char = { size: 8, alignment: 32, required_alignment: 32 }@align(4) typedef { size: 8, alignment: 8 }char

A = { size: 32, alignment: 32, required_alignment: 32 }struct {
    { offset: 0, size: 8 }a { size: 8, alignment: 32, required_alignment: 32 }Char,
}

B = { size: 32, alignment: 32 }struct {
    { offset: 0, size: 1 }a { size: 8, alignment: 32, required_alignment: 32 }Char:1,
}

C = { size: 32, alignment: 32, required_alignment: 32 }@pragma_pack(1) struct {
    { offset: 0, size: 32 }a { size: 32, alignment: 32, required_alignment: 32 }A,
}

D = { size: 32, alignment: 8 }@pragma_pack(1) struct {
    { offset: 0, size: 32 }a { size: 32, alignment: 32 }B,
}
// hash: 647f567a1a56da32
